generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../src/database/shapez_gates_db.sqlite"
}

model User {
  id               String               @id @default(uuid())
  name             String               @unique
  // TODO implement email confirmation support in the future
  email            String               @unique
  password         String
  createdAt        DateTime             @default(now())
  puzzles          Puzzle[]
  completedPuzzles PuzzleCompleteData[]
  puzzlesResports  PuzzleReport[]

  @@map("users")
}

model Puzzle {
  id                     Int                  @id @default(autoincrement())
  shortKey               String
  likes                  Int                  @default(0)
  downloads              Int                  @default(0)
  difficulty             Decimal?
  averageTime            Int?
  title                  String
  user                   User?                @relation(fields: [author], references: [id], onDelete: Restrict)
  author                 String?
  authorName             String               @default("official")
  data                   String
  description            String
  afterCompletingMessage String?
  minimumComponents      Int
  maximumComponents      Int? // TODO implement Component and NAND counting
  minimumNands           Int
  createdAt              DateTime             @default(now())
  completions            Int                  @default(0)
  completionsData        PuzzleCompleteData[]
  puzzleReports          PuzzleReport[]

  @@map("puzzles")
}

model PuzzleCompleteData {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  puzzle           Puzzle   @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId         Int
  timeTaken        Int?
  componentsUsed   Int? // TODO implement Component and NAND counting
  nandsUsed        Int?
  difficultyRating Int?
  completed        Boolean  @default(false)
  liked            Boolean  @default(false)
  createdAt        DateTime @default(now())

  @@unique([userId, puzzleId])
  @@map("puzzle_complete_data")
}

model PuzzleReport {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId  Int
  createdAt DateTime @default(now())
  reason    String

  @@map("puzzle_reports")
}
