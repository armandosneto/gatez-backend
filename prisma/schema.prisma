generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../src/database/shapez_gates_db.sqlite"
}

model User {
  id                  String               @id @default(uuid())
  name                String               @unique
  email               String               @unique
  password            String
  confirmed           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  trophies            Int                  @default(0)
  // references the enum UserRole
  userRole            Int                  @default(0)
  puzzles             Puzzle[]             @relation(name: "puzzleAuthor")
  completedPuzzles    PuzzleCompleteData[]
  bans                UserBan[]            @relation(name: "bans")
  bansExpedited       UserBan[]            @relation(name: "bansExpedited")
  bansLifted          UserBan[]            @relation(name: "bansLifted")
  PuzzleReport        PuzzleReport[]       @relation(name: "user")
  ReportsReviewed     PuzzleReport[]       @relation(name: "reviewer")
  PuzzleTranslation   PuzzleTranslation[]  @relation(name: "PuzzleTranslationUser")
  TranslationReviewed PuzzleTranslation[]  @relation(name: "PuzzleTranslationReviewer")
  puzzlesHidden       Puzzle[]             @relation(name: "puzzlehiddenBy")

  @@map("users")
}

model UserBan {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(name: "bans", fields: [userId], references: [id], onDelete: Cascade)
  reason          String
  moderatorId     String?
  moderator       User?     @relation(name: "bansExpedited", fields: [moderatorId], references: [id], onDelete: SetNull)
  reasonLifted    String?
  moderatorLiftId String?
  moderatorLift   User?     @relation(name: "bansLifted", fields: [moderatorLiftId], references: [id], onDelete: SetNull)
  liftedAt        DateTime?
  createdAt       DateTime  @default(now())
  expiresAt       DateTime

  @@map("user_bans")
}

model Puzzle {
  id                      Int                  @id @default(autoincrement())
  shortKey                String
  likes                   Int                  @default(0)
  completions             Int                  @default(0)
  downloads               Int                  @default(0)
  difficulty              Float?
  averageTime             Float?
  averageDifficultyRating Float?
  title                   String
  user                    User?                @relation(name: "puzzleAuthor", fields: [author], references: [id], onDelete: Restrict)
  author                  String?
  authorName              String               @default("official")
  data                    String
  description             String
  afterCompletingMessage  String?
  minimumComponents       Int
  maximumComponents       Int?
  minimumNands            Int
  createdAt               DateTime             @default(now())
  locale                  String               @default("en")
  hiddenAt                DateTime?
  hiddenById              String?
  hiddenBy                User?                @relation(name: "puzzlehiddenBy", fields: [hiddenById], references: [id], onDelete: SetNull)
  completionsData         PuzzleCompleteData[]
  puzzleReports           PuzzleReport[]
  translations            PuzzleTranslation[]

  @@map("puzzles")
}

model PuzzleCompleteData {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  puzzle           Puzzle    @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId         Int
  timeTaken        Int?
  componentsUsed   Int?
  nandsUsed        Int?
  difficultyRating Int?
  completedAt      DateTime?
  liked            Boolean   @default(false)
  createdAt        DateTime  @default(now())

  @@unique([userId, puzzleId])
  @@map("puzzle_complete_data")
}

model PuzzleReport {
  id          String    @id @default(uuid())
  user        User      @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  puzzle      Puzzle    @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId    Int
  reason      String
  legit       Boolean   @default(false)
  reviewedAt  DateTime?
  reviewNotes String?
  reviewer    User?     @relation(name: "reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId  String?
  createdAt   DateTime  @default(now())

  @@map("puzzle_reports")
}

// TODO add afterCompletingMessage in the future if it starts being used
model PuzzleTranslation {
  id          String    @id @default(uuid())
  puzzle      Puzzle    @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId    Int
  user        User?     @relation(name: "PuzzleTranslationUser", fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  locale      String
  title       String
  description String
  approved    Boolean
  reviewer    User?     @relation(name: "PuzzleTranslationReviewer", fields: [reviewerId], references: [id], onDelete: SetNull)
  reviewerId  String?
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())

  @@unique([userId, puzzleId, locale])
  @@map("puzzle_translations")
}
